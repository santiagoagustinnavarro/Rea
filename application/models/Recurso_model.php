<?php

/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */
 
class Recurso_model extends CI_Model
{
    public function __construct()
    {
        parent::__construct();
        $this->load->library("session");
        $this->load->library("pagination");
    }
    
    function get_recurso($idRecurso)
    { $this->db->join("tenerestadorecurso","tenerestadorecurso.idRecurso=recurso.idRecurso");
      
        $this->db->join("usuario","usuario.nombreUsuario=recurso.nombreUsuario");
       return  $this->db->get_where('recurso',array('recurso.idRecurso'=>$idRecurso,'tenerestadorecurso.fechaFin'=>null))->row_array();
        
    }
    
    public function get_all_mis_recursos($nombreUsuario){
		$this->db->select("recurso.idRecurso,recurso.titulo,usuario.nombreUsuario,recurso.descripcion,tenerestadorecurso.nombreEstadoRecurso,recurso.nombreTema,recurso.nombreCategoria");
		$this->db->join("usuario","usuario.nombreUsuario=recurso.nombreUsuario");
		$this->db->join("tenerestadorecurso","tenerestadorecurso.idRecurso=recurso.idRecurso");
	 $this->db->where(array("tenerestadorecurso.nombreEstadoRecurso=alta","usuario.nombreUsuario"=>$nombreUsuario,"tenerestadorecurso.fechaFin"=>null));//->result_array();
	 return $this->db->get('recurso')->result_array();
	
	}
    /*
     * Get all recurso
     */
    public function get_all_recurso($filters=array())
    {  if(isset($filters['limit']) && isset($filters['offset']))
        {
            $this->db->limit($filters['limit'], $filters['offset']);
            unset($filters['limit']);
            unset($filters['offset']);
            $this->db->select("recurso.idRecurso,recurso.titulo,usuario.nombreUsuario,recurso.descripcion,recurso.validado,usuario.email,tenerestadorecurso.nombreEstadoRecurso,recurso.nombreTema,recurso.nombreCategoria");
        }else{
            $this->db->select("archivo.nombre as nombreDelUsuario,recurso.idRecurso,archivo.idArchivo,archivo.nombre,archivo.ruta,recurso.titulo,usuario.nombreUsuario,recurso.descripcion,recurso.validado,usuario.email,tenerestadorecurso.nombreEstadoRecurso,recurso.nombreTema,recurso.nombreCategoria");
            $this->db->join("archivo","archivo.idRecurso=recurso.idRecurso");
        }
        
        $this->db->join("tenerestadorecurso","tenerestadorecurso.idRecurso=recurso.idRecurso");
        $this->db->join("usuario","usuario.nombreUsuario=recurso.nombreUsuario");
        $filters["tenerestadorecurso.fechaFin"]=null;
        $results=$this->db->get_where('recurso',$filters)->result_array();; 
        return $results;
    }
    function get_all_recurso_count()
    {$this->db->join("usuario","usuario.nombreUsuario=recurso.nombreUsuario");
        $this->db->join("tenerestadorecurso","tenerestadorecurso.idRecurso=recurso.idRecurso");
        $results=$this->db->get_where('recurso',array('tenerestadorecurso.fechaFin'=>null))->result_array();; 
        return count($results);
    }
    public function row_count($filtros="")
    {       $this->db->distinct(); 
        if ($filtros!="") {

            $this->db->select("r.validado,r.idRecurso,r.titulo as titulo,r.descripcion as recursoDesc,r.nombreUsuario as nombreUsuario,t.nombre as nombre",false);
            $this->db->from("recurso as r");
            $this->db->join("usuario as u", "u.nombreUsuario=r.nombreUsuario");
            $this->db->join("tema as t", "t.nombre=r.nombreTema");
            $this->db->join("tenercategoria tc", "tc.nombreTema=t.nombre");
            $this->db->join("categoria as c", "tc.nombreCategoria=c.nombre");
            $this->db->join("poseenivel as p", "p.idRecurso=r.idRecurso");
            $this->db->join("nivel as n", "n.nombre=p.nombreNivel");

            
            if (count($filtros["niveles"])>0) {
                $sql="(";
                foreach ($filtros["niveles"] as $unNivel) {
                   $sql.="n.nombre="."\"".$unNivel."\""." or ";
                }
                $sql=substr($sql,0,strripos($sql,"or")-1).")";
                $this->db->where($sql);
            }
            if ($filtros["tema"]!="") {
                $this->db->where(array("t.nombre"=>$filtros["tema"]));
            }
            if($filtros["categoria"]!=""){
                $this->db->where(array("c.nombre"=>$filtros["categoria"]));
                
               }
            if($filtros["busqueda"]!=""){
                $this->db->like("r.titulo",$filtros["busqueda"],'both');
            }
            
        } else {
           
            $this->db->select("r.idRecurso,r.titulo as titulo,r.descripcion as recursoDesc,r.nombreUsuario as nombreUsuario",false);
            $this->db->from("recurso as r");
            
        }
        return $this->db->count_all_results();
    }
    

    public function fetch_recurso($limit, $start, $filtros="")
    {       $this->db->distinct(); 
        $this->db->select("u.foto,r.validado,c.nombre,r.idRecurso,r.titulo as titulo,r.descripcion as recursoDesc,r.nombreUsuario as nombreUsuario,t.nombre as nombre",false);
        $this->db->from("recurso as r");
        $this->db->join("tema as t", "t.nombre=r.nombreTema");
        $this->db->join("usuario as u", "u.nombreUsuario=r.nombreUsuario");
        $this->db->join("tenercategoria tc", "tc.nombreTema=t.nombre");
        $this->db->join("tenerestadorecurso ter", "ter.idRecurso=r.idRecurso");
        $this->db->join("categoria as c", "tc.nombreCategoria=c.nombre");
        $this->db->join("poseenivel as p", "p.idRecurso=r.idRecurso");
        $this->db->join("nivel as n", "n.nombre=p.nombreNivel");
        $this->db->where("ter.nombreEstadoRecurso=\"alta\" and ter.fechaFin is null");
        if ($filtros!="") {

            if ($filtros["tema"]!="") {
                $this->db->where(array("t.nombre"=>$filtros["tema"]));
                
            }
                if($filtros["categoria"]!=""){
                    $this->db->where(array("c.nombre"=>$filtros["categoria"]));
                    
                   }
               if (count($filtros["niveles"])>0) {
                $sql="(";
                foreach ($filtros["niveles"] as $unNivel) {
                   $sql.="n.nombre="."\"".$unNivel."\""." or ";
                }
                $sql=substr($sql,0,strripos($sql,"or")-1).")";
                $this->db->where($sql);
            }
            if($filtros["busqueda"]!=""){
                $this->db->like("r.titulo",$filtros["busqueda"],'both');//Both hace referencia a cualquier aparicion
            }
            
        } else {
 
        }
      
        $this->db->limit($limit, $start);
        $query= $this->db->get();
      
           // echo $this->db->last_query();
        
         
        if ($query->num_rows() > 0) {
            foreach ($query->result() as $row) {
                $data[] = $row;
            }
            return $data;
        }
        $data=[];
        return $data;
    }
        
    /*
     * function to add new recurso
     */
    public function add_recurso($params)
    {
        $this->db->insert('recurso', $params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update recurso
     */
    public function update_recurso($idRecurso, $params)
    {
        $this->db->where('idRecurso', $idRecurso);
     
        return  $this->db->update('recurso', $params);
        

    }
    
    /*
     * function to delete recurso
     */
    public function delete_recurso($nombre)
    {
        return $this->db->delete('recurso', array('nombre'=>$nombre));
    }
}
