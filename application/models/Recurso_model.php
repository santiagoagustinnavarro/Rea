<?php

/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */
 
class Recurso_model extends CI_Model
{
    public function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get estadousuario by nombre
     */
    public function get_recurso($nombre)
    {
        return $this->db->get_where('recurso', array('nombre'=>$nombre))->row_array();
    }
        
    /*
     * Get all estadousuario
     */
    public function get_all_recurso($filters="")
    {
        $this->db->join('archivo', 'archivo.idRecurso = recurso.idRecurso');
        if ($filters!="") {
            $this->db->where($filters);
        }
        $this->db->order_by('recurso.idrecurso', 'desc');
        $recursos=$this->db->get('recurso')->result_array();
        $anterior=-1;//Esta variable hara referencia al recurso anterior en el array
        for ($i=0;$i<count($recursos);$i++) {
            $actual=$recursos[$i]["idRecurso"];//Recurso en el que estoy situado
            if ($actual==$anterior) {//El anterior y el actual son el mismo recurso
                //Aqui generamos el array con el archivo asociado y lo añadimos al array de archivos del recurso
                $archivo['idArchivo']=$recursos[$i]["idArchivo"];
                $archivo['nombre']=$recursos[$i]["nombre"];
                $archivo['ruta']=$recursos[$i]["ruta"];
                $recursos[$i-1]['archivos'][]=$archivo;
                unset($recursos[$i]);//Eliminamos el recurso repetido(posicion en el array)
                $recursos=array_values($recursos);//Restablecemos los indices del array
                $archivo=array();//vaciamos los datos del archivo para proximas cargas
                $i=$i-1;//Como eliminamos una posicion del array y lo reordenamos debemos situarnos -1 posicion por el reacomodo
            } else {//El recurso ah cambiado
                //Aqui generamos el array con el archivo asociado y lo añadimos al array de archivos del recurso
                $archivo['idArchivo']=$recursos[$i]["idArchivo"];
                $archivo['nombre']=$recursos[$i]["nombre"];
                $archivo['ruta']=$recursos[$i]["ruta"];
                unset($recursos[$i]['idArchivo']);//Quitamos el key idArchivo ya no es necesario
                unset($recursos[$i]['nombre']);//Quitamos el key nombre (del archivo) ya no es necesario
                unset($recursos[$i]['ruta']);//Quitamos el key ruta ya no es necesario
                $recursos[$i]['archivos'][]=$archivo;//Cargamos el archivo dentro del array correspondiente al recurso
                $archivo=array();//vaciamos los datos del archivo para proximas cargas
                $anterior=$actual;//Cambiamos de recurso por lo cual ahora este sera el anterior
            }
        }
        return $recursos;
    }
    

        
    /*
     * function to add new estadousuario
     */
    public function add_recurso($params)
    {
        $this->db->insert('recurso', $params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update estadousuario
     */
    public function update_estadousuario($nombre, $params)
    {
        $this->db->where('nombre', $nombre);
        return $this->db->update('estadoUsuario', $params);
    }
    
    /*
     * function to delete estadousuario
     */
    public function delete_estadousuario($nombre)
    {
        return $this->db->delete('estadoUsuario', array('nombre'=>$nombre));
    }
}
